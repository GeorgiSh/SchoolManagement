//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolManagement.Client.StudentServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StudentServiceReference.IStudentService")]
    public interface IStudentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/AddStudent", ReplyAction="http://tempuri.org/IStudentService/AddStudentResponse")]
        void AddStudent(SchoolManagement.Models.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/AddStudent", ReplyAction="http://tempuri.org/IStudentService/AddStudentResponse")]
        System.Threading.Tasks.Task AddStudentAsync(SchoolManagement.Models.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetStudent", ReplyAction="http://tempuri.org/IStudentService/GetStudentResponse")]
        SchoolManagement.Models.Student GetStudent(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetStudent", ReplyAction="http://tempuri.org/IStudentService/GetStudentResponse")]
        System.Threading.Tasks.Task<SchoolManagement.Models.Student> GetStudentAsync(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllStudents", ReplyAction="http://tempuri.org/IStudentService/GetAllStudentsResponse")]
        SchoolManagement.Models.Student[] GetAllStudents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllStudents", ReplyAction="http://tempuri.org/IStudentService/GetAllStudentsResponse")]
        System.Threading.Tasks.Task<SchoolManagement.Models.Student[]> GetAllStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/UpdateStudent", ReplyAction="http://tempuri.org/IStudentService/UpdateStudentResponse")]
        void UpdateStudent(SchoolManagement.Models.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/UpdateStudent", ReplyAction="http://tempuri.org/IStudentService/UpdateStudentResponse")]
        System.Threading.Tasks.Task UpdateStudentAsync(SchoolManagement.Models.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/DeleteStudent", ReplyAction="http://tempuri.org/IStudentService/DeleteStudentResponse")]
        void DeleteStudent(int studentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/DeleteStudent", ReplyAction="http://tempuri.org/IStudentService/DeleteStudentResponse")]
        System.Threading.Tasks.Task DeleteStudentAsync(int studentId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStudentServiceChannel : SchoolManagement.Client.StudentServiceReference.IStudentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StudentServiceClient : System.ServiceModel.ClientBase<SchoolManagement.Client.StudentServiceReference.IStudentService>, SchoolManagement.Client.StudentServiceReference.IStudentService {
        
        public StudentServiceClient() {
        }
        
        public StudentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StudentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StudentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StudentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddStudent(SchoolManagement.Models.Student student) {
            base.Channel.AddStudent(student);
        }
        
        public System.Threading.Tasks.Task AddStudentAsync(SchoolManagement.Models.Student student) {
            return base.Channel.AddStudentAsync(student);
        }
        
        public SchoolManagement.Models.Student GetStudent(int studentId) {
            return base.Channel.GetStudent(studentId);
        }
        
        public System.Threading.Tasks.Task<SchoolManagement.Models.Student> GetStudentAsync(int studentId) {
            return base.Channel.GetStudentAsync(studentId);
        }
        
        public SchoolManagement.Models.Student[] GetAllStudents() {
            return base.Channel.GetAllStudents();
        }
        
        public System.Threading.Tasks.Task<SchoolManagement.Models.Student[]> GetAllStudentsAsync() {
            return base.Channel.GetAllStudentsAsync();
        }
        
        public void UpdateStudent(SchoolManagement.Models.Student student) {
            base.Channel.UpdateStudent(student);
        }
        
        public System.Threading.Tasks.Task UpdateStudentAsync(SchoolManagement.Models.Student student) {
            return base.Channel.UpdateStudentAsync(student);
        }
        
        public void DeleteStudent(int studentId) {
            base.Channel.DeleteStudent(studentId);
        }
        
        public System.Threading.Tasks.Task DeleteStudentAsync(int studentId) {
            return base.Channel.DeleteStudentAsync(studentId);
        }
    }
}
